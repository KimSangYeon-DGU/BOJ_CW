/*
다익스트라
1->route1->route2->끝
1->route2->route1->끝
만약 결과값이 800*1000 = 800,000보다 큰 값이면
경로가 없는 것이므로 -1 출력
*/

#include <cstdio>
#include <queue>
#include <functional>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#define MAX_S 801
#define INF 800001
using namespace std;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vii;
typedef vector<vector<pii>> vvii;

vvii adj(MAX_S);
vi dijkstra(int N, int src) {
	vi dist(N + 1, INF);
	dist[src] = 0;
	priority_queue<pii, vii, greater<pii>> pq;
	pq.push(make_pair(0, src));
	while (!pq.empty()) {
		int cost = pq.top().first;
		int cur = pq.top().second;
		pq.pop();
		if (dist[cur] < cost)
			continue;
		for (auto &i : adj[cur]) {
			if (dist[i.first] > cost + i.second) {
				dist[i.first] = cost + i.second;
				pq.push(make_pair(dist[i.first], i.first));
			}
		}
	}
	return dist;
}
int main() {
	int N, E, i, u, v, w, r1, r2, ans = 0;
	scanf("%d %d", &N, &E);

	for (i = 0; i < E; i++) {
		scanf("%d %d %d", &u, &v, &w);
		adj[u].push_back(make_pair(v, w));
		adj[v].push_back(make_pair(u, w));
	}
	scanf("%d %d", &r1, &r2);
	int ans1 = 0, ans2 = 0;
	vi temp;
	temp = dijkstra(N, 1); //1에서 출발
	ans1 += temp[r1]; //1에서 r1
	ans2 += temp[r2]; //1에서 r2

	temp = dijkstra(N, r1); //r1에서 출발
	ans1 += temp[r2]; //r1에서 r2
	ans2 += temp[N]; //r1에서 끝

	temp = dijkstra(N, r2); //r2에서 출발
	ans1 += temp[N]; //r2에서 끝
	ans2 += temp[r1]; //r2에서 r1

	//ans1 1->r1->r2->끝
	//ans2 1->r2->r1->끝

	ans1 = min(ans1, ans2);
	if (ans1 > INF)
		printf("-1\n");
	else
		printf("%d\n", ans1);
	return 0;
}
