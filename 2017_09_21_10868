/*
일정한 범위에서 해당 값을 찾는 방법 중
세그먼트 트리의 시간복잡도가 O(logN)이기 때문에 
이러한 문제에선 가장 효율적이다.
따라서 세그먼트 트리를 사용하였고 구현 방식은 
인접한 노드 중 가장 작은 값을 부모 노드가 저장하도록 하였다.
이렇게 완성된 트리로 search함수를 구현하여 
범위에 해당하는 값 중 가장 작은 값을 탐색하였다.
*/

#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>
#define INF 2e9;
using namespace std;
typedef long long ll;

ll init(vector<ll> &v, vector<ll> &tree, int node, int start, int end) {
	if (start == end)
		return tree[node] = v[start];
	else
		return tree[node] = min(init(v, tree, node * 2, start, (start + end) / 2), init(v, tree, node * 2 + 1, (start + end) / 2 + 1, end));
}
ll search(vector<ll> &tree, int node, int start, int end, int left, int right) {
	if (right < start || left > end)
		return INF;
	if (left <= start && right >= end)
		return tree[node];
	return min(search(tree, node*2, start, (start+end)/2, left, right), search(tree, node*2+1, (start+end)/2+1, end, left, right));
}
int main() {
	int N, M, i, a, b;
	scanf("%d %d", &N, &M);
	vector<ll> v(N);
	int h = (int)ceil(log2(N));
	int tree_Size = 1 << (h + 1);
	vector<ll> tree(tree_Size);
	for (i = 0; i < N; i++) {
		scanf("%lld", &v[i]);
	}
	init(v, tree, 1, 0, N - 1);
	while (M--) {
		scanf("%d %d", &a, &b);
		printf("%lld\n", search(tree, 1, 0, N - 1, a-1, b-1));
	}
	return 0;
}
