/*
입력을 받고 각 문자 W, L를 각각 0, 1로 맵핑하였다.
새로운 map을 만들고 육지마다 bfs를 돌려 가장 큰 dis를 찾았다. 
*/

#include <cstdio>
#include <cstring>
#include <queue>
#define MAX_S 51
using namespace std;

char input[MAX_S];
int map[MAX_S][MAX_S];
bool visited[MAX_S][MAX_S];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};
int n, m, max_Dis;

bool isOkay(int x, int y) {
	if (x < 1 || x > n || y < 1 || y > m)
		return false;
	if (visited[x][y] == true || map[x][y] == 0)
		return false;
	return true;
}

void bfs(int u, int v) {
	queue<pair<pair<int, int>, int>> q;
	int cur_X, cur_Y, new_X, new_Y, cur_Dis;
	q.push(make_pair(make_pair(u, v), 1));
	visited[u][v] = true;
	while (!q.empty()) {
		cur_X = q.front().first.first;
		cur_Y = q.front().first.second;
		cur_Dis = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			new_X = cur_X + dx[i];
			new_Y = cur_Y + dy[i];
			if (isOkay(new_X, new_Y)) {
				visited[new_X][new_Y] = true;
				q.push(make_pair(make_pair(new_X, new_Y), cur_Dis + 1));
				if (max_Dis < cur_Dis)
					max_Dis = cur_Dis;
			}
		}
	}
}

int main() {
	int i, j;
	scanf("%d %d", &n, &m);
	for (i = 1; i <= n; i++) {
		scanf("%s", &input);
		for (j = 0; j < m; j++) {
			if (input[j] == 'W')
				map[i][j + 1] = 0;
			else if (input[j] == 'L')
				map[i][j + 1] = 1;
		}
	}
	for (i = 1; i <= n; i++) {
		for (j = 1; j <= m; j++) {
			if (map[i][j] == 1) {
				bfs(i, j);
				memset(visited, false, sizeof visited);
			}
		}
	}
	printf("%d\n", max_Dis);
	return 0;
}
