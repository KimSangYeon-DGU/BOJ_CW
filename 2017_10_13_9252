/*
LCS 알고리즘(DP) + LCS 출력 알고리즘(Backtracking)
*/
#include <cstdio>
#include <string>
#include <iostream>
#include <algorithm>
#include <cstring>
#define MAX_S 1001
using namespace std;

int DP[MAX_S][MAX_S];
char input[MAX_S], compare[MAX_S];
string result;
void lcs(int m, int n) {
	int i, j;

	for (i = 1; i <= m; i++) {
		for (j = 1; j <= n; j++) {
			if (input[i] == compare[j]) {
				DP[i][j] = DP[i - 1][j - 1] + 1;
			}
			else {
				DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]);
			}
		}
	}
}

void backtrack(int m, int n) {
	if (m == 0 || n == 0)
		return;
	else if (input[m] == compare[n]) {
		result += input[m];
		return backtrack(m-1, n-1);
	}
	else {
		if (DP[m -1][n] > DP[m][n - 1])
			return backtrack(m - 1, n);
		else
			return backtrack(m, n - 1);
	}

}

int main() {
	int m, n;
	input[0] = ' ';
	compare[0] = ' ';
	cin >> input + 1 >> compare + 1;
	m = strlen(input);
	n = strlen(compare);
	lcs(m - 1, n - 1);
	backtrack(m-1, n-1);
	int len = result.size();
	cout << DP[m - 1][n - 1] << endl;
	for (int i = len - 1; i >= 0; i--) {
		cout << result[i];
	}
	cout << endl;
	return 0;
}
