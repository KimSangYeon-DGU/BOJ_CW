#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>
#define INF 2e9
using namespace std;

int init_MinTree(vector<int> &v, vector<int> &min_tree, int node, int start, int end) {
	if (start == end)
		return min_tree[node] = v[start];
	else {
		return min_tree[node] = min(init_MinTree(v, min_tree, node * 2, start, (start + end) / 2), init_MinTree(v, min_tree, node * 2 + 1, (start + end) / 2 + 1, end));
	}
}

int init_MaxTree(vector<int> &v, vector<int> &max_tree, int node, int start, int end) {
	if (start == end)
		return max_tree[node] = v[start];
	else {
		return max_tree[node] = max(init_MaxTree(v, max_tree, node * 2, start, (start + end) / 2), init_MaxTree(v, max_tree, node * 2 + 1, (start + end) / 2 + 1, end));
	}
}

int search_Min(vector<int> &tree, int node, int start, int end, int left, int right) {
	if (right < start || left > end)
		return INF;
	if (left <= start && right >= end)
		return tree[node];
	return min(search_Min(tree, node * 2, start, (start + end) / 2, left, right), search_Min(tree, node * 2 + 1, (start + end) / 2 + 1, end, left, right));
}

int search_Max(vector<int> &tree, int node, int start, int end, int left, int right) {
	if (right < start || left > end)
		return -1;
	if (left <= start && right >= end)
		return tree[node];
	return max(search_Max(tree, node * 2, start, (start + end) / 2, left, right), search_Max(tree, node * 2 + 1, (start + end) / 2 + 1, end, left, right));
}
int main() {
	int N, M;
	scanf("%d %d", &N, &M);
	vector<int> v(N);
	int h = (int)ceil(log2(N));
	int tree_Size = 1 << (h + 1);
	vector<int> min_Tree(tree_Size);
	vector<int> max_Tree(tree_Size);
	for (int i = 0; i < N; i++) {
		scanf("%d", &v[i]);
	}
	init_MinTree(v, min_Tree, 1, 0, N - 1);
	init_MaxTree(v, max_Tree, 1, 0, N - 1);
	while (M--) {
		int a, b;
		scanf("%d %d", &a, &b);
		printf("%d %d\n", search_Min(min_Tree, 1, 0, N - 1, a - 1, b - 1), search_Max(max_Tree, 1, 0, N - 1, a - 1, b - 1));
	}
	return 0;
}

