/*
세그먼트 트리로 해결하였다.
리프 노드는 모두 1값을 가지고 있고 부모노드는 리프노드의 합을 가진다.
각각의 노드안에 데이터는 들어갈 수 있는 숫자의 개수
각각의 리프 노드의 인덱스는 번호의 순서를 의미한다.
위치를 발견하면 위치에 해당하는 노드를 Lazy Propagation을 이용하여 update시킨다.
이와 같은 로직을 n번 반복하였다.
*/
#include <cstdio>
#define MAX_S 300001
using namespace std;

int tree[MAX_S];
int ans[MAX_S];

int init(int node, int start, int end) {
	if (start == end)
		return tree[node] = 1;
	else {
		return tree[node] = init(node * 2, start, (start+end)/2) + init(node*2+1, (start+end)/2+1, end);
	}
}

int nth(int k, int node, int start, int end) {
	if (start == end)
		return start;
	else if (k < tree[node * 2]) {
		return nth(k, node * 2, start, (start + end) / 2);
	}
	else {
		return nth(k - tree[node * 2], node * 2 + 1, (start + end) / 2 + 1, end);
	}
}

int update(int pos, int node, int start, int end) {
	if (pos == start && pos == end)
		return tree[node] = 0;
	else if (pos < start || pos > end)
		return tree[node];
	else
		return tree[node] = update(pos, node * 2, start, (start + end) / 2) + update(pos, node * 2 + 1, (start + end) / 2 + 1, end);
}

int main() {
	int n, i, input, xth;
	scanf("%d", &n);
	init(1, 0, n - 1);
	for (i = 0; i < n; i++) {
		scanf("%d", &input);
		xth = nth(input, 1, 0, n - 1);
		ans[xth] = i + 1;
		update(xth, 1, 0, n-1);
	}
	for (i = 0; i < n; i++) {
		printf("%d\n", ans[i]);
	}
	return 0;
}
